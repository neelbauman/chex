-*- mode:org; -*-
file://~/org/agenda.org

* TDDの流れ
1. 失敗するテストを書く（ほしい挙動をリストする）
2. テストを実行して失敗することを確認
3. テストを成功させる最低限の実装を書く（クソコードでもいいからテストを通過させる）
4. テストを実行して成功することを確認
5. テストがオチないようにしながら実装をリファクタリングする

** 格言１
はじめから複雑な世界を想像するよりは、まずはとても単純な世界を仮定して始めて、うまく行かなかったら複雑化させれたほうが良い。
*** 注釈
- とても単純な世界だと思ってやってみることのフットワークは軽くなくてはならない。
- どうやって複雑化させるのが良いのかはまた別の話。
** 格言２
ゼロからいきなり最良を実現するよりは、最低限のものを最良へ向けて改良していくほうが簡単だ。
** オリジナル要素
*** Jupyter Lab でSKETCHを書きながら世界のことを眺めてテストの設計を考えることは良いことでは？
*** テストを Jupyter Lab で書いちゃってもいいしね。

* 課題事項
** 数学記法の形態素解析
** ソースがSVGだったらMyScriptを利用してLaTeX記法に変換できる。（画像のラベルセットへの置換）
** LaTeXコマンドをパースするのは多分簡単
** 数学記法の形態素解析がうまく実装できなかったときの保険的代替案を考えておく。

* CRAWLERの構成
** Crawlerクラス
- 対象ドメインのindexのロードと新規作成
- indexからSiteDataオブジェクトの作成
- 対象ドメインのページへのリクエスト
  - 詳細はSiteオブジェクトに任せる
- indexの更新
- indexのload&dump

** Siteクラス
- SiteDataとContentsをデータとして保持する
- 担当のurlへのrequestやデータの整形などをイッテに引き受ける

#+begin_src plantuml :file static/img/crawler_activity.svg
start

partition "initialize" {
:ドメインのデータディレクトリを探す;
if (データディレクトリがある) then (yes)
:indexをロードする;
else (no)
:ドメインのhash名でディレクトリを作成する;
}

if (indexがある) then (yes)
:indexをロードする;
else (no)
:LPへ飛ぶ;
endif

#+end_src

#+RESULTS:
[[file:static/img/crawler_activity.svg]]

#+begin_src plantuml
main -> CRAWLER: initialize
activate CRAWLER


#+end_src

* CRAWLERの実装 [0/4]
** TODO Crawler [23%]
*** TODO Crawler初期化 [0%]
**** TOTEST domainを渡して初期化
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:48]
     :END:
**** TOTEST indexを初期化する
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:48]
     :END:
**** TOTEST self._parent, self._target, self.footprintの初期化
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 11:29]
     :END:
***** TOTEST indexが空であればLPから始める
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:54]
     :END:
***** TOTEST indexがあればfootprintのスタート位置をランダムにindexから選ぶ
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:53]
     :END:

*** TODO 基礎的な振る舞い [0%]
**** self._parent.data.hrefsの更新
**** TOTEST self._parent.data.hrefsからtarget_hrefを選び、self._target_hrefに格納
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:57]
     :END:
***** TOTEST hrefsの中から特定のアルゴリズムにしたがって次のページを決める（最初は乱数）
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:59]
     :END:
**** TOTEST self._target_href.urlにリクエストを飛ばして、resを取得、self._resに保存
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 11:14]
     :END:
**** TOTEST resの結果に応じてself._target_hrefを更新、適切なresが得られるまで繰り返す
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 11:17]
     :END:
***** TOTEST 成功してればactive:True,self._target_href["n_passed"]+1,lastタイムスタンプ
      :LOGBOOK:
      - State "TOTEST"     from              [2023-08-31 木 15:10]
      :END:
***** TOTEST getに失敗すればactive:Falseにしてtarget_hrefの選定に戻ってやり直す
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 07:02]
     :END:



**** self._targetの作成
**** TOTEST indexからself._target_href.urlと同じurlをもったdataを取ってきてself._dataに格納
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 11:13]
     :END:
***** TOTEST このときのindexをself._iに格納する
      :LOGBOOK:
      - State "TOTEST"     from              [2023-08-31 木 11:23]
      :END:
***** TOTEST ヒットするdataがなければself._iは-1、self._dataはNone
      :LOGBOOK:
      - State "TOTEST"     from              [2023-08-31 木 11:46]
      :END:
**** TOTEST self._dataとself._resからSiteオブジェクトを作成し、self._targetに格納
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 11:14]
     :END:
***** self._data == None ならばself._resからdataも作成する。


**** self._target.dataの更新
**** TOTEST self._target.dataのパラメータを更新する
     :LOGBOOK:
     - State "TOTEST"     from "TOTEST"     [2023-08-31 木 11:56]
     :END:
***** self._target.data["n_visited"]+1
***** active:True
***** last timestamp
***** 
**** TOTEST self._targetとself._parentの比較処理でself._target_href["score"]を計算
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 14:58]
     :END:



**** self.indexとself.footprintの更新
**** TOTEST self.index[self._p_i]にself._parent.dataを格納
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 14:54]
     :END:
**** TOTEST self.index[self._i]にself._target.dataを格納
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 14:54]
     :END:
***** TOTEST self._i==-1であればインデックスにdataが存在しないページなのでindex.append
      :LOGBOOK:
      - State "TOTEST"     from              [2023-08-31 木 15:13]
      :END:


**** TOTEST self._targetをself._parentに格納
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 14:59]
     :END:
**** TOTEST self._iをself._p_iに格納
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 14:59]
     :END:
**** TOTEST self.footprintにself._target.dataを格納
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-31 木 15:15]
     :END:

*** TODO サイクル単位で情報を保存する [0%]
**** TOTEST footprintが初期化規定に触れたか判定
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 07:06]
     :END:
***** スタート地点に戻ってきた。
***** 一定以上の長さになった。
**** TOTEST 触れていたらcycle.jsonに書き出してfootprintは初期化
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 07:07]
     :END:
**** TOTEST 触れていたらindexも上書き保存
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 07:08]
     :END:
***** jsonに変換してからindex.jsonにダンプしないと行けない


*** TOTEST HTMLをjsonに保存できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:07]
    :END:
*** TOTEST HTMLからマークアップを削除して記事情報だけを抽出できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:08]
    :END:
*** TOTEST 記事情報を保存できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:09]
    :END:
*** TOTEST 記事情報からLaTeX記法を抽出できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:04]
    :END:
*** TOTEST LaTeX記法のみをまとめて保存できる
    :LOGBOOK:
    - State "TOTEST"     from "WAIT"       [2023-08-23 水 15:09]
    :END:
** TODO Webページ構造インデックス作成・表示機能（OFFICER） [0%]
*** TOTEST 対象ドメインに存在するHTMLのページのインデックスを作成できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:23]
    :END:
*** TOTEST ページ間のリンクのテーブルを作れる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:25]
    :END:
*** TOTEST リンクテーブルをもとに、リンクグラフを作って表示できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:27]
    :END:
** TODO 外部ストレージへの保存 [0%]
*** TOTEST S3へのログイン
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:13]
    :END:
*** TOTEST S3へのアップロード
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:11]
    :END:
*** TOTEST S3からのファイル取得
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:11]
    :END:
*** TOTEST 直接S3へソースを保存
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:12]
    :END:
** TODO デーモン化 [0%]
*** TOTEST リモートサーバ上で稼働することを確認
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:15]
    :END:
*** TOTEST 更新指示で対象サイトを訪問してソースの更新をする
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:16]
    :END:
*** TOTEST 定期的に対象サイトを訪問してソースの更新をする
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:17]
    :END:
* PARSERの実装
