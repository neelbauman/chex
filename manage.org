-*- mode:org; -*-
file://~/org/agenda.org

* TDDの流れ
1. 失敗するテストを書く（ほしい挙動をリストする）
2. テストを実行して失敗することを確認
3. テストを成功させる最低限の実装を書く（クソコードでもいいからテストを通過させる）
4. テストを実行して成功することを確認
5. テストがオチないようにしながら実装をリファクタリングする

** 格言１
はじめから複雑な世界を想像するよりは、まずはとても単純な世界を仮定して始めて、うまく行かなかったら複雑化させれたほうが良い。
*** 注釈
- とても単純な世界だと思ってやってみることのフットワークは軽くなくてはならない。
- どうやって複雑化させるのが良いのかはまた別の話。
** 格言２
ゼロからいきなり最良を実現するよりは、最低限のものを最良へ向けて改良していくほうが簡単だ。
** オリジナル要素
*** Jupyter Lab でSKETCHを書きながら世界のことを眺めてテストの設計を考えることは良いことでは？
*** テストを Jupyter Lab で書いちゃってもいいしね。

* 課題事項
** 数学記法の形態素解析
** ソースがSVGだったらMyScriptを利用してLaTeX記法に変換できる。（画像のラベルセットへの置換）
** LaTeXコマンドをパースするのは多分簡単
** 数学記法の形態素解析がうまく実装できなかったときの保険的代替案を考えておく。

* CRAWLERの構成
** Crawlerクラス
- 対象ドメインのindexのロードと新規作成
- indexからSiteDataオブジェクトの作成
- 対象ドメインのページへのリクエスト
  - 詳細はSiteオブジェクトに任せる
- indexの更新
- indexのload&dump

** Siteクラス
- SiteDataとContentsをデータとして保持する
- 担当のurlへのrequestやデータの整形などをイッテに引き受ける

#+begin_src plantuml :file static/img/crawler_activity.svg
start

partition "initialize" {
:ドメインのデータディレクトリを探す;
if (データディレクトリがある) then (yes)
:indexをロードする;
else (no)
:ドメインのhash名でディレクトリを作成する;
}

if (indexがある) then (yes)
:indexをロードする;
else (no)
:LPへ飛ぶ;
endif

#+end_src

#+RESULTS:
[[file:static/img/crawler_activity.svg]]

#+begin_src plantuml
main -> CRAWLER: initialize
activate CRAWLER


#+end_src

* CRAWLERの実装 [0/4]
** TODO コアとなるsurveyの実装（ローカルでの挙動） [23%]
*** TODO Crawler初期化 [0%]
**** TOTEST domainを渡して初期化
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:48]
     :END:
**** TOTEST domainのhash名でデータが存在しているかを確認する
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:48]
     :END:
**** TOTEST データが存在していればindexをロードしてデータとして保持する
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-25 金 15:28]
    :END:
**** TOTEST データが存在していなければディレクトリを作成し、空のindexを持つ
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:49]
     :END:
**** TOTEST footprintを空のリストで持つ
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:52]
     :END:
*** TODO データ取得 [14%]
**** TOTEST indexがあればスタート位置をランダムにindexから選ぶ
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:53]
     :END:
**** TOTEST indexがなければdomainルートにアクセスしてリダイレクトされるページ（LP）から始める
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:54]
     :END:
**** GREEN [[https://math.jp/wiki/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8][Mathpedia]]のtargetにRequestでgetを飛ばす
    :LOGBOOK:
    - State "GREEN"      from "TOTEST"     [2023-08-27 日 11:01]
    - State "TOTEST"     from              [2023-08-23 水 14:54]
    :END:
**** TOTEST getが成功すればfootprintを更新、indexの情報を更新
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:57]
     :END:
**** TOTEST getに失敗すれば再度ページの選定をして別のページを選ぶ
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 07:02]
     :END:
**** TOTEST resからhrefsを取得し、indexのhrefsと差分が無いか調べる
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:59]
     :END:
**** TOTEST hrefsの中から特定のアルゴリズムにしたがって次のページを決める（最初は乱数）
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 06:59]
     :END:
*** TODO サイクル単位で情報を保存する [0%]
**** TOTEST footprintが初期化規定に触れたか判定
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 07:06]
     :END:
***** スタート地点に戻ってきた。
***** 一定以上の長さになった。
**** TOTEST 触れていたらcycle.jsonに書き出してfootprintは初期化
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 07:07]
     :END:
**** TOTEST 触れていたらindexも上書き保存
     :LOGBOOK:
     - State "TOTEST"     from              [2023-08-28 月 07:08]
     :END:
*** TODO ターゲットページに過去に訪問したことがあるかを調べる [100%]
**** GREEN ターゲットのデータファイルが存在するかどうかを確認する
     :LOGBOOK:
     - State "GREEN"      from "TOTEST"     [2023-08-27 日 18:18]
     - State "TOTEST"     from              [2023-08-27 日 11:05]
     :END:
**** GREEN 存在する場合、jsonを読み込む。存在しない場合、新規ファイルを作成する。
    :LOGBOOK:
    - State "GREEN"      from "TOTEST"     [2023-08-27 日 18:18]
    - State "TOTEST"     from              [2023-08-25 金 15:28]
    :END:

*** TOTEST HTMLをjsonに保存できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:07]
    :END:
*** TOTEST HTMLからマークアップを削除して記事情報だけを抽出できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:08]
    :END:
*** TOTEST 記事情報を保存できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:09]
    :END:
*** TOTEST 記事情報からLaTeX記法を抽出できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:04]
    :END:
*** TOTEST LaTeX記法のみをまとめて保存できる
    :LOGBOOK:
    - State "TOTEST"     from "WAIT"       [2023-08-23 水 15:09]
    :END:
** TODO Webページ構造インデックス作成・表示機能（OFFICER） [0%]
*** TOTEST 対象ドメインに存在するHTMLのページのインデックスを作成できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:23]
    :END:
*** TOTEST ページ間のリンクのテーブルを作れる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:25]
    :END:
*** TOTEST リンクテーブルをもとに、リンクグラフを作って表示できる
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:27]
    :END:
** TODO 外部ストレージへの保存 [0%]
*** TOTEST S3へのログイン
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:13]
    :END:
*** TOTEST S3へのアップロード
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:11]
    :END:
*** TOTEST S3からのファイル取得
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:11]
    :END:
*** TOTEST 直接S3へソースを保存
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:12]
    :END:
** TODO デーモン化 [0%]
*** TOTEST リモートサーバ上で稼働することを確認
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:15]
    :END:
*** TOTEST 更新指示で対象サイトを訪問してソースの更新をする
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:16]
    :END:
*** TOTEST 定期的に対象サイトを訪問してソースの更新をする
    :LOGBOOK:
    - State "TOTEST"     from              [2023-08-23 水 15:17]
    :END:
* PARSERの実装
